{"version":3,"sources":["constants.js","App.js","reportWebVitals.js","index.js"],"names":["modes","serverAdd","user","username","password","milliSecondsInDay","getCorrectDate","currDate","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","window","onbeforeunload","localStorage","removeItem","App","useState","isLoggedIn","setLoggedIn","fetch","method","headers","body","JSON","stringify","then","res","ok","Error","json","setItem","access","catch","err","console","log","name","message","chosenDate","setChosenDate","mode","useRef","correctDate","getTime","rangeText","current","getDay","dateRange","id","todo","setTodo","sendUpdateRequest","type","item","params","key","data","isFirst","Authorization","getItem","sendGetRequest","urlWithParams","URLSearchParams","date","makeList","alert","dummyRecord","title","description","date_added","completed","visible","setVisible","activeRecord","setActive","formRef","inputTitle","inputDescription","inputDate","inputCompleted","inputID","handleSubmit","newRecord","value","checked","reset","showModal","record","listWithKey","map","rest","sort","a","b","listGrouped","idx","dataSource","columns","pagination","pageSize","dataIndex","render","text","CheckCircleTwoTone","twoToneColor","style","fontSize","ExclamationCircleTwoTone","size","onClick","disabled","markAsComplete","danger","deleteItem","placeholder","href","rel","target","className","checkedChildren","unCheckedChildren","defaultChecked","selected","onChange","onOk","onCancel","ref","onSubmit","htmlFor","defaultValue","required","readOnly","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee4a11da.chunk.js","sourcesContent":["export const modes = { daily: 0, weekly: 1 };\nexport const serverAdd = \"http://localhost:8000/api/todos/\";\nexport const authAdd = \"http://localhost:8000/token-auth/\";\nexport const user = { username: \"pareil1337\", password: \"internship\" };\n","import React, { useState, useRef } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { Switch, Button, Space, Table, Modal } from \"antd\";\nimport {\n  CheckCircleTwoTone,\n  ExclamationCircleTwoTone,\n} from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport { serverAdd, authAdd, modes, user } from \"./constants.js\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./App.css\";\n\nconst milliSecondsInDay = 86400 * 1000;\n\n// converts date string into iso format (YYYY-DD-MM)\nconst getCorrectDate = (currDate) => {\n  const d = new Date(currDate);\n  let month = \"\" + (d.getMonth() + 1);\n  let day = \"\" + d.getDate();\n  const year = d.getFullYear();\n\n  if (month.length < 2) {\n    month = \"0\" + month;\n  }\n  if (day.length < 2) {\n    day = \"0\" + day;\n  }\n  return [year, month, day].join(\"-\");\n};\n\n// clear localStorage when tab is closed\nwindow.onbeforeunload = () => {\n  localStorage.removeItem(\"token\");\n};\n\nfunction App() {\n  // authentication\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  if (!isLoggedIn) {\n    fetch(authAdd, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(user),\n    })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Check credentials (i.e. constants.js).\");\n        }\n        return res.json();\n      })\n      .then((res) => {\n        localStorage.setItem(\"token\", res.access);\n        setLoggedIn(true);\n      })\n      .catch((err) => console.log(err.name, \"\\n\", err.message));\n  }\n\n  // Dates and Modes\n  const [chosenDate, setChosenDate] = useState(new Date());\n  const mode = useRef(modes.daily);\n  const correctDate = getCorrectDate(chosenDate.getTime());\n  const rangeText =\n    mode.current === modes.weekly\n      ? \"*\" +\n        getCorrectDate(\n          chosenDate - ((chosenDate.getDay() + 6) % 7) * milliSecondsInDay\n        ) +\n        \" to \" +\n        getCorrectDate(\n          chosenDate - ((chosenDate.getDay() - 7) % 7) * milliSecondsInDay\n        )\n      : \"\";\n  const dateRange =\n    rangeText.length > 0 ? <span id=\"dateRange\">{rangeText}</span> : null;\n  const [todo, setTodo] = useState(null);\n  const onDateChange = (date) => {\n    setChosenDate(date);\n    setTodo(null);\n  };\n  const setToday = () => {\n    setChosenDate(new Date());\n    setTodo(null);\n  };\n  const onModeChange = () => {\n    mode.current = mode.current === modes.daily ? modes.weekly : modes.daily;\n    sendGetRequest();\n  };\n\n  // All non-GET API Requests\n  const sendUpdateRequest = (type, item) => {\n    let params = \"\";\n    const { key, id, isFirst, ...data } = item;\n    if (type !== \"POST\") {\n      params = id + \"/\";\n    }\n    const urlWithParams = serverAdd + params;\n    fetch(urlWithParams, {\n      method: type,\n      headers: {\n        \"Content-Type\": \"application/JSON\",\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n      },\n      body: data ? JSON.stringify(data) : null,\n    })\n      .then(sendGetRequest)\n      .catch((err) => console.log(err));\n  };\n\n  const sendGetRequest = () => {\n    const urlWithParams =\n      serverAdd +\n      \"?\" +\n      new URLSearchParams({ date: correctDate, mode: mode.current });\n    fetch(urlWithParams, {\n      headers: {\n        \"Content-Type\": \"application/JSON\",\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n      },\n    })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Check credentials and try refreshing.\");\n        }\n        return res.json();\n      })\n      .then((res) => makeList(res))\n      .catch(alert);\n\n    // sample data for development/ debugging\n    // const today = new Date().toLocaleDateString(\"en-us\");\n    // const fakeData = JSON.stringify([\n    //   {\n    //     id: 1,\n    //     title: \"French\",\n    //     description: \"lessons 33 and 34\",\n    //     dateAdded: today,\n    //     completed: false,\n    //   },\n    // ]);\n    // makeList(fakeData);\n  };\n\n  // form is uncontrolled (uses Refs)\n  const dummyRecord = {\n    title: \"\",\n    description: \"\",\n    date_added: correctDate,\n    completed: false,\n    id: -1,\n  };\n  const [visible, setVisible] = useState(false);\n  const [activeRecord, setActive] = useState(dummyRecord);\n  const formRef = useRef(null);\n  const inputTitle = useRef(null);\n  const inputDescription = useRef(null);\n  const inputDate = useRef(null);\n  const inputCompleted = useRef(null);\n  const inputID = useRef(0);\n\n  const handleSubmit = () => {\n    const newRecord = {\n      title: inputTitle.current.value,\n      description: inputDescription.current.value,\n      date_added: inputDate.current.value,\n      completed: inputCompleted.current.checked,\n    };\n    if (inputID.current === -1) {\n      // new entry: no 'id' field, use POST\n      sendUpdateRequest(\"POST\", newRecord);\n    } else {\n      newRecord.id = inputID.current;\n      sendUpdateRequest(\"PUT\", newRecord);\n    }\n    formRef.current.reset();\n    setVisible(false);\n  };\n  const handleCancel = () => {\n    formRef.current.reset();\n    setVisible(false);\n  };\n\n  // Edit, Complete, and Delete\n  const showModal = (record) => {\n    inputID.current = record.id || -1;\n    setVisible(true);\n    setActive(record);\n  };\n\n  const markAsComplete = (record) => {\n    record.completed = true;\n    sendUpdateRequest(\"PUT\", record);\n  };\n\n  const deleteItem = (record) => {\n    sendUpdateRequest(\"DELETE\", record);\n  };\n\n  // Make table out of returned contents\n  const makeList = (res) => {\n    const listWithKey = res.map(({ id: value, ...rest }) => ({\n      key: value,\n      id: value,\n      ...rest,\n    }));\n    const compareFn = (a, b) => {\n      if (a.title < b.title) {\n        return -1;\n      }\n      if (a.title > b.title) {\n        return 1;\n      }\n      return 0;\n    };\n    listWithKey.sort(compareFn);\n    const listGrouped = listWithKey.map((value, idx) => ({\n      ...value,\n      isFirst: idx === 0 || value.title !== listWithKey[idx - 1].title,\n    }));\n\n    setTodo(\n      <Table\n        dataSource={listGrouped}\n        columns={columns}\n        pagination={{ pageSize: 7 }}\n      />\n    );\n  };\n\n  const columns = [\n    {\n      title: \"Title\",\n      dataIndex: \"title\",\n      key: \"title\",\n      render: (text, record) => record.isFirst && text,\n    },\n    {\n      title: \"Description\",\n      dataIndex: \"description\",\n      key: \"description\",\n    },\n    {\n      title: \"Date Added\",\n      dataIndex: \"date_added\",\n      key: \"date_added\",\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"completed\",\n      key: \"completed\",\n      render: (text) =>\n        text ? (\n          <CheckCircleTwoTone\n            twoToneColor=\"#52c41a\"\n            style={{ fontSize: \"16px\" }}\n          />\n        ) : (\n          <ExclamationCircleTwoTone\n            twoToneColor=\"#eb2f96\"\n            style={{ fontSize: \"16px\" }}\n          />\n        ),\n    },\n    {\n      title: \"Actions\",\n      key: \"action\",\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button onClick={() => showModal(record)}>Edit</Button>\n          <Button\n            disabled={record.completed}\n            onClick={() => markAsComplete(record)}\n          >\n            Complete\n          </Button>\n          <Button danger onClick={() => deleteItem(record)}>\n            Delete\n          </Button>\n        </Space>\n      ),\n    },\n  ];\n\n  const placeholder = (\n    <div id=\"placeholder\">\n      <h2>Not connected to server.</h2>\n      <p>\n        Start one{\" \"}\n        <a\n          href=\"https://github.com/kxiao1/todo-logs-backend\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          here\n        </a>\n        .\n      </p>\n    </div>\n  );\n  if (isLoggedIn && todo == null) {\n    sendGetRequest();\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"wrap\">\n        <h1 id=\"title\">todo-logs</h1>\n        {todo && (\n          <>\n            <div className=\"switch\">\n              <Switch\n                onClick={onModeChange}\n                checkedChildren=\"Weekly\"\n                unCheckedChildren=\"Daily\"\n                defaultChecked={mode.current === modes.weekly}\n              />\n              {dateRange}\n            </div>\n            <div className=\"close\">\n              <div className=\"date\">\n                <DatePicker\n                  id=\"datepicker\"\n                  selected={chosenDate}\n                  onChange={onDateChange}\n                />\n                <Button onClick={setToday}>\n                  {mode.current === modes.daily ? \"Today\" : \"This Week\"}\n                </Button>\n              </div>\n              <Button type=\"primary\" onClick={() => showModal(dummyRecord)}>\n                New Task\n              </Button>\n            </div>\n            {todo}\n            <Modal\n              visible={visible}\n              onOk={handleSubmit}\n              onCancel={handleCancel}\n            >\n              <form ref={formRef} onSubmit={handleSubmit}>\n                <h2 id=\"modalTitle\">\n                  {inputID.current === -1 ? \"New Task\" : \"Edit Task\"}\n                </h2>\n                <label htmlFor=\"title\" className=\"required\">\n                  Title\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"title\"\n                  defaultValue={activeRecord.title}\n                  ref={inputTitle}\n                  placeholder=\"200 Characters Max\"\n                  required\n                />\n                <br></br>\n                <label htmlFor=\"description\">\n                  Description\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  defaultValue={activeRecord.description}\n                  ref={inputDescription}\n                  placeholder=\"Optional\"\n                />\n                <br></br>\n                <label htmlFor=\"date\">Date added</label>\n                <input\n                  type=\"date\"\n                  name=\"date\"\n                  defaultValue={activeRecord.date_added}\n                  ref={inputDate}\n                  readOnly\n                  id=\"readonly\"\n                />\n                <br></br>\n                <input\n                  type=\"checkbox\"\n                  name=\"completed\"\n                  ref={inputCompleted}\n                  defaultChecked={activeRecord.completed}\n                />\n                <label htmlFor=\"completed\">Completed?</label>\n              </form>\n            </Modal>\n          </>\n        )}\n      </div>\n      {!isLoggedIn && placeholder}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}